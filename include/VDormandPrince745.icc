#include <G4FieldUtils.hh>
#include <G4LineSection.hh>


using namespace field_utils;

template <typename EquationOfMotion>
void DormandPrince745<EquationOfMotion, Double_8v>::Stepper(
    const Double_8v& yInput,
    const Double_8v& dydxInput,
    G4double hstep,
    Double_8v& yOutput,
    Double_8v& yError)
{
    fyIn = yInput;
    fdydx = dydxInput;
    fhstep = hstep;
    
    makeStep(fyIn, dydxInput, fhstep, fyOut, yError, fak);

    yOutput = fyOut;
}

template <typename EquationOfMotion>
void DormandPrince745<EquationOfMotion, Double_8v>::makeStep(
    const Double_8v& yInput,
    const Double_8v& dydxInput,
    G4double hstep,
    Double_8v& yOutput,
    Double_8v& yError,
    ACoeffs& ak) const
{
    const G4double
        b21 = 0.2,
    
        b31 = 3.0 / 40.0, b32 = 9.0 / 40.0,
    
        b41 = 44.0/45.0, b42 = -56.0 / 15.0, b43 = 32.0 / 9.0,
        
        b51 = 19372.0 / 6561.0, b52 = -25360.0 / 2187.0, b53 = 64448.0 / 6561.0,
        b54 = -212.0 / 729.0 ,
        
        b61 = 9017.0 / 3168.0 , b62 =   -355.0 / 33.0,
        b63 =  46732.0 / 5247.0, b64 = 49.0 / 176.0,
        b65 = -5103.0 / 18656.0,
        
        b71 = 35.0 / 384.0, b72 = 0.,
        b73 = 500.0 / 1113.0, b74 = 125.0 / 192.0,
        b75 = -2187.0 / 6784.0, b76 = 11.0 / 84.0,
     
    
        dc1 = -(b71 - 5179.0 / 57600.0),
        dc2 = -(b72 - .0),
        dc3 = -(b73 - 7571.0 / 16695.0),
        dc4 = -(b74 - 393.0 / 640.0),
        dc5 = -(b75 + 92097.0 / 339200.0),
        dc6 = -(b76 - 187.0 / 2100.0),
        dc7 = -(- 1.0 / 40.0);


    Double_8v yTemp;
    yOutput[7] = yTemp[7] = yInput[7];
    
    // dydxIn = fEquation(yIn);
    yTemp = yInput + b21 * hstep * dydxInput;

    fEquation->RightHandSide(yTemp, ak[2]);            
    yTemp = yInput + hstep * (b31 * dydxInput + b32 * ak[2]);

    fEquation->RightHandSide(yTemp, ak[3]);
    yTemp = yInput + hstep * (b41 * dydxInput + b42 * ak[2] + b43 * ak[3]);

    fEquation->RightHandSide(yTemp, ak[4]);
    yTemp = yInput + hstep * (b51 * dydxInput + b52 * ak[2] + b53 * ak[3] + b54 * ak[4]);

    fEquation->RightHandSide(yTemp, ak[5]); 
    yTemp = yInput + hstep * 
        (b61 * dydxInput + b62 * ak[2] + b63 * ak[3] + b64 * ak[4] + b65 * ak[5]);

    fEquation->RightHandSide(yTemp, ak[6]);
    yOutput = yInput + hstep * 
        (b71 * dydxInput + b72 * ak[2] + b73 * ak[3] + 
            b74 * ak[4] + b75 * ak[5] + b76 * ak[6]);

    fEquation->RightHandSide(yOutput, ak[7]);
    yError = hstep * 
        (dc1 * dydxInput + dc2 * ak[2] + dc3 * ak[3] + 
         dc4 * ak[4] + dc5 * ak[5] + dc6 * ak[6] + dc7 * ak[7]);
}

template <typename EquationOfMotion>
void DormandPrince745<EquationOfMotion, Double_8v>::Interpolate4th(Double_8v& y, G4double tau) const
{
    const G4double
      tau_2 = tau * tau,
      tau_3 = tau * tau_2,
      tau_4 = tau_2 * tau_2;
    
    G4double bf1 = 
        (157015080.0 * tau_4 - 13107642775.0 * tau_3 + 34969693132.0 * tau_2 - 32272833064.0 * tau + 11282082432.0) / 11282082432.0;
    G4double bf3 = 
        - 100.0 * tau * (15701508.0 * tau_3 - 914128567.0 * tau_2 + 2074956840.0 * tau - 1323431896.0) / 32700410799.0;
    G4double bf4 = 25.0 * tau * (94209048.0 * tau_3 - 1518414297.0 * tau_2 + 2460397220.0 * tau - 889289856.0) / 5641041216.0;
    G4double bf5 = - 2187.0 * tau * (52338360.0 * tau_3 - 451824525.0 * tau_2 + 687873124.0 * tau - 259006536.0) / 199316789632.0;
    G4double bf6 =  11.0 * tau * (106151040.0 * tau_3 - 661884105.0 * tau_2 + 946554244.0 * tau - 361440756.0) / 2467955532.0;
    G4double bf7 = tau * (1.0 - tau) * (8293050.0 * tau_2 - 82437520.0 * tau + 44764047.0) / 29380423.0;

    y = fyIn + fhstep * tau * (bf1 * fdydx + bf3 * fak[3]+ bf4 * fak[4] + bf5 * fak[5] + bf6 * fak[6] + bf7 * fak[7]);
}

template <typename EquationOfMotion>
G4double DormandPrince745<EquationOfMotion, Double_8v>::DistChord() const
{
    const G4double
        hf1 = 6025192743.0 / 30085553152.0,
        hf2 = 0.0,
        hf3 = 51252292925.0 / 65400821598.0,
        hf4 = - 2691868925.0 / 45128329728.0,
        hf5 = 187940372067.0 / 1594534317056.0,
        hf6 = - 1776094331.0 / 19743644256.0,
        hf7 = 11237099.0 / 235043384.0;

    const G4ThreeVector begin = makeVector(fyIn, Value3D::Position);
    const G4ThreeVector end = makeVector(fyOut, Value3D::Position);
    G4ThreeVector mid;

    for(G4int i = 0; i < 3; ++i) {
       mid[i] = begin[i] + 0.5 * fhstep * 
           (hf1 * fdydx[i] + hf2 * fak[2][i] + hf3 * fak[3][i] + 
            hf4 * fak[4][i] + hf5 * fak[5][i] + hf6 * fak[6][i] + hf7 * fak[7][i]);
    }

    return G4LineSection::Distline(mid, begin, end);
}

template <typename EquationOfMotion>
G4double DormandPrince745<EquationOfMotion, Double_8v>::DistChord2() const
{
    Double_8v yMid;
    Interpolate4th(yMid, 0.5);

    const G4ThreeVector begin = makeVector(fyIn, Value3D::Position);
    const G4ThreeVector end = makeVector(fyOut, Value3D::Position);
    const G4ThreeVector mid = makeVector(yMid, Value3D::Position);

    return G4LineSection::Distline(mid, begin, end);
}

template <typename EquationOfMotion>
G4double DormandPrince745<EquationOfMotion, Double_8v>::DistChord3() const
{
    ACoeffs ak;
    Double_8v yMid, yError;
    makeStep(fyIn, fdydx, fhstep / 2., yMid, yError, ak);

    const G4ThreeVector begin = makeVector(fyIn, Value3D::Position);
    const G4ThreeVector end = makeVector(fyOut, Value3D::Position);
    const G4ThreeVector mid = makeVector(yMid, Value3D::Position);

    return G4LineSection::Distline(mid, begin, end);
    return 0;
}

